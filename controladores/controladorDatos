const connection = require('../config/bbdd')
const { comprobarToken } = require('./autentificacion');

const obtenerDatosM3Operario = async (req, res) => {
  const token = req.headers['x-access-token'];

  if (!token) {
    return res.status(401).send({ auth: false, message: 'No token provided.' });
  }
  const tokenValido = await comprobarToken(token);
  if (!tokenValido) {
    return res.status(401).send({ auth: false, message: 'Fallo al autentificar el Token' }); 
  }


  const query = 'SELECT usuario, SUM(M3_Tratadas_Turno) AS M3_Tratados FROM Datos_Turno GROUP BY usuario';
  connection.query(query, (error, results) => {
    if (error) throw error;
    res.json(results);  // EnvÃ­a los resultados en formato JSON
  });

};
const obtenerDatosPlanta = async (req, res) => {
  const token = req.headers['x-access-token'];

  if (!token) {
    return res.status(401).send({ auth: false, message: 'No token provided.' });
  }
  const tokenValido = await comprobarToken(token);
  if (!tokenValido) {
    return res.status(401).send({ auth: false, message: 'Fallo al autentificar el Token' }); 
  }

  const query = `
      SELECT 
          DiaTurno, 
          M3_Tratadas_Turno, 
          Horas_Tratadas_Turno, 
          Horas_Turno, 
          M3_Principio_Turno, 
          M3_Final_Turno, 
          M3_h
      FROM Datos_Turno`;

  connection.query(query, (error, results) => {
    if (error) {
      console.error('Error al obtener datos de la planta:', error);
      return res.status(500).send({ message: 'Error interno del servidor', error: error.message });
    }
    if (results.length > 0) {
      res.json(results); 
    } else {
      res.status(404).send({ message: 'No se encontraron datos para el turno proporcionado' });
    }
  });
}
module.exports = {
  obtenerDatosM3Operario,
  obtenerDatosPlanta
}
